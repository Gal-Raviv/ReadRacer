{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tsuna\\\\reading-experiment\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Home from './Home';\nimport ReadingRoom from './ReadingRoom';\nimport Quiz from './Quiz';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst sampleText = `This is a sample AI-generated text for the reading experiment. \nUsers will read this and then answer questions.`;\nconst correctAnswers = {\n  q1: 'b',\n  q2: 'b',\n  // For short answer q3, we’ll do a simple keyword check\n  q3Keywords: ['read', 'answer', 'questions', 'experiment']\n};\nfunction App() {\n  _s();\n  const [page, setPage] = useState('home');\n  const [readingTime, setReadingTime] = useState(null);\n  const [quizAnswers, setQuizAnswers] = useState(null);\n  function startExperiment() {\n    setPage('reading');\n  }\n  function finishReading(time) {\n    setReadingTime(time);\n    setPage('quiz');\n  }\n  function submitQuiz(answers) {\n    const result = checkAnswers(answers);\n    setQuizAnswers({\n      ...answers,\n      ...result\n    });\n    setPage('finished');\n  }\n  function checkAnswers(userAnswers) {\n    let score = 0;\n    let total = 3;\n\n    // Check multiple choice q1 and q2\n    if (userAnswers.q1 === correctAnswers.q1) score++;\n    if (userAnswers.q2 === correctAnswers.q2) score++;\n\n    // For q3, check if the answer contains keywords (case insensitive)\n    const answerText = userAnswers.q3.toLowerCase();\n    let keywordMatches = 0;\n    correctAnswers.q3Keywords.forEach(keyword => {\n      if (answerText.includes(keyword)) keywordMatches++;\n    });\n\n    // Consider q3 correct if at least half keywords present\n    if (keywordMatches >= correctAnswers.q3Keywords.length / 2) score++;\n    return {\n      score,\n      total,\n      passed: score / total >= 0.8\n    };\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [page === 'home' && /*#__PURE__*/_jsxDEV(Home, {\n      onStart: startExperiment\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 27\n    }, this), page === 'reading' && /*#__PURE__*/_jsxDEV(ReadingRoom, {\n      text: sampleText,\n      onFinish: finishReading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 30\n    }, this), page === 'quiz' && /*#__PURE__*/_jsxDEV(Quiz, {\n      onSubmit: submitQuiz\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 27\n    }, this), page === 'finished' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-h-screen flex flex-col items-center justify-center p-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl mb-4\",\n        children: \"You finished reading and quiz!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mb-2\",\n        children: [\"Reading time: \", readingTime, \" seconds\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mb-2\",\n        children: [\"Your quiz answers: \", JSON.stringify(quizAnswers)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setPage('home'),\n        className: \"px-6 py-3 bg-blue-600 text-white rounded hover:bg-blue-700 transition\",\n        children: \"Back to Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"HxmGnPPlCopsTSvjlsxtUcl1sOY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Home","ReadingRoom","Quiz","jsxDEV","_jsxDEV","Fragment","_Fragment","sampleText","correctAnswers","q1","q2","q3Keywords","App","_s","page","setPage","readingTime","setReadingTime","quizAnswers","setQuizAnswers","startExperiment","finishReading","time","submitQuiz","answers","result","checkAnswers","userAnswers","score","total","answerText","q3","toLowerCase","keywordMatches","forEach","keyword","includes","length","passed","children","onStart","fileName","_jsxFileName","lineNumber","columnNumber","text","onFinish","onSubmit","className","JSON","stringify","onClick","_c","$RefreshReg$"],"sources":["C:/Users/tsuna/reading-experiment/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport Home from './Home';\nimport ReadingRoom from './ReadingRoom';\nimport Quiz from './Quiz';\n\nconst sampleText = `This is a sample AI-generated text for the reading experiment. \nUsers will read this and then answer questions.`;\n\nconst correctAnswers = {\n  q1: 'b',\n  q2: 'b',\n  // For short answer q3, we’ll do a simple keyword check\n  q3Keywords: ['read', 'answer', 'questions', 'experiment'],\n};\n\n\nfunction App() {\n  const [page, setPage] = useState('home');\n  const [readingTime, setReadingTime] = useState(null);\n  const [quizAnswers, setQuizAnswers] = useState(null);\n\n  function startExperiment() {\n    setPage('reading');\n  }\n\n  function finishReading(time) {\n    setReadingTime(time);\n    setPage('quiz');\n  }\n\nfunction submitQuiz(answers) {\n  const result = checkAnswers(answers);\n  setQuizAnswers({ ...answers, ...result });\n  setPage('finished');\n}\n  function checkAnswers(userAnswers) {\n  let score = 0;\n  let total = 3;\n\n  // Check multiple choice q1 and q2\n  if (userAnswers.q1 === correctAnswers.q1) score++;\n  if (userAnswers.q2 === correctAnswers.q2) score++;\n\n  // For q3, check if the answer contains keywords (case insensitive)\n  const answerText = userAnswers.q3.toLowerCase();\n  let keywordMatches = 0;\n  correctAnswers.q3Keywords.forEach(keyword => {\n    if (answerText.includes(keyword)) keywordMatches++;\n  });\n\n  // Consider q3 correct if at least half keywords present\n  if (keywordMatches >= correctAnswers.q3Keywords.length / 2) score++;\n\n  return { score, total, passed: score / total >= 0.8 };\n}\n\n\n  return (\n    <>\n      {page === 'home' && <Home onStart={startExperiment} />}\n      {page === 'reading' && <ReadingRoom text={sampleText} onFinish={finishReading} />}\n      {page === 'quiz' && <Quiz onSubmit={submitQuiz} />}\n      {page === 'finished' && (\n        <div className=\"min-h-screen flex flex-col items-center justify-center p-6\">\n          <h2 className=\"text-2xl mb-4\">You finished reading and quiz!</h2>\n          <p className=\"mb-2\">Reading time: {readingTime} seconds</p>\n          <p className=\"mb-2\">Your quiz answers: {JSON.stringify(quizAnswers)}</p>\n          <button\n            onClick={() => setPage('home')}\n            className=\"px-6 py-3 bg-blue-600 text-white rounded hover:bg-blue-700 transition\"\n          >\n            Back to Home\n          </button>\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}