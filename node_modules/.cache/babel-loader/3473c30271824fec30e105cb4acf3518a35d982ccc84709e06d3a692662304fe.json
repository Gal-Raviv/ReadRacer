{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tsuna\\\\reading-experiment\\\\src\\\\components\\\\PersonalResults.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { ScatterChart, Scatter, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PersonalResults = ({\n  user\n}) => {\n  _s();\n  const [summaryAttempts, setSummaryAttempts] = useState([]);\n  const [fullPassageAttempts, setFullPassageAttempts] = useState([]);\n  const [globalAverages, setGlobalAverages] = useState(null);\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const res = await fetch(`https://read-racer.azurewebsites.net/api/getUserResults?email=${user.email}`);\n        const data = await res.json();\n        const summary = data.results.filter(r => r.useSummary);\n        const full = data.results.filter(r => !r.useSummary);\n        setSummaryAttempts(summary);\n        setFullPassageAttempts(full);\n        setGlobalAverages(data.globalAverages);\n        console.log(\"Summary attempts (user):\", userSummaryAttempts);\n        console.log(\"Passage attempts (user):\", userPassageAttempts);\n      } catch (err) {\n        console.error(\"Failed to load user results:\", err);\n      }\n    }\n    if (user) fetchData();\n  }, [user]);\n  const renderChart = (data, label, globalDot) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mb-8\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"text-xl font-semibold mb-2 text-gray-700\",\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 300,\n      children: /*#__PURE__*/_jsxDEV(ScatterChart, {\n        margin: {\n          top: 10,\n          right: 20,\n          bottom: 20,\n          left: 0\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          type: \"number\",\n          dataKey: \"wpm\",\n          name: \"Reading Speed\",\n          unit: \" WPM\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          type: \"number\",\n          dataKey: \"accuracy\",\n          name: \"Accuracy\",\n          unit: \"%\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          cursor: {\n            strokeDasharray: \"3 3\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Scatter, {\n          name: \"Your Attempts\",\n          data: data,\n          fill: \"#3b82f6\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this), globalDot && /*#__PURE__*/_jsxDEV(Scatter, {\n          name: \"Global Avg\",\n          data: [globalDot],\n          fill: \"#ef4444\",\n          shape: \"star\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6 max-w-4xl mx-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-3xl font-bold mb-6 text-gray-800\",\n      children: \"Your Personal Results\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), renderChart(summaryAttempts.map(r => ({\n      wpm: r.realWPM,\n      accuracy: Math.round(r.score / r.total * 100)\n    })), \"AI Summary Attempts\", (globalAverages === null || globalAverages === void 0 ? void 0 : globalAverages.summary) && {\n      wpm: globalAverages.summary.avgWPM,\n      accuracy: globalAverages.summary.avgAccuracy\n    }), renderChart(fullPassageAttempts.map(r => ({\n      wpm: r.effectiveWPM,\n      accuracy: Math.round(r.score / r.total * 100)\n    })), \"Full Passage Attempts\", (globalAverages === null || globalAverages === void 0 ? void 0 : globalAverages.full) && {\n      wpm: globalAverages.full.avgWPM,\n      accuracy: globalAverages.full.avgAccuracy\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(PersonalResults, \"5nq1/Su7i0ojoNOz3zqtW2uroJE=\");\n_c = PersonalResults;\nexport default PersonalResults;\nvar _c;\n$RefreshReg$(_c, \"PersonalResults\");","map":{"version":3,"names":["React","useEffect","useState","ScatterChart","Scatter","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","PersonalResults","user","_s","summaryAttempts","setSummaryAttempts","fullPassageAttempts","setFullPassageAttempts","globalAverages","setGlobalAverages","fetchData","res","fetch","email","data","json","summary","results","filter","r","useSummary","full","console","log","userSummaryAttempts","userPassageAttempts","err","error","renderChart","label","globalDot","className","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","margin","top","right","bottom","left","type","dataKey","name","unit","cursor","strokeDasharray","fill","shape","map","wpm","realWPM","accuracy","Math","round","score","total","avgWPM","avgAccuracy","effectiveWPM","_c","$RefreshReg$"],"sources":["C:/Users/tsuna/reading-experiment/src/components/PersonalResults.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { ScatterChart, Scatter, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\r\n\r\nconst PersonalResults = ({ user }) => {\r\n  const [summaryAttempts, setSummaryAttempts] = useState([]);\r\n  const [fullPassageAttempts, setFullPassageAttempts] = useState([]);\r\n  const [globalAverages, setGlobalAverages] = useState(null);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      try {\r\n        const res = await fetch(\r\n          `https://read-racer.azurewebsites.net/api/getUserResults?email=${user.email}`\r\n        );\r\n        const data = await res.json();\r\n\r\n        const summary = data.results.filter((r) => r.useSummary);\r\n        const full = data.results.filter((r) => !r.useSummary);\r\n        setSummaryAttempts(summary);\r\n        setFullPassageAttempts(full);\r\n        setGlobalAverages(data.globalAverages);\r\n        console.log(\"Summary attempts (user):\", userSummaryAttempts);\r\nconsole.log(\"Passage attempts (user):\", userPassageAttempts);\r\n\r\n      } catch (err) {\r\n        console.error(\"Failed to load user results:\", err);\r\n      }\r\n    }\r\n\r\n    if (user) fetchData();\r\n  }, [user]);\r\n\r\n  const renderChart = (data, label, globalDot) => (\r\n    <div className=\"mb-8\">\r\n      <h3 className=\"text-xl font-semibold mb-2 text-gray-700\">{label}</h3>\r\n      <ResponsiveContainer width=\"100%\" height={300}>\r\n        <ScatterChart margin={{ top: 10, right: 20, bottom: 20, left: 0 }}>\r\n          <CartesianGrid />\r\n          <XAxis type=\"number\" dataKey=\"wpm\" name=\"Reading Speed\" unit=\" WPM\" />\r\n          <YAxis type=\"number\" dataKey=\"accuracy\" name=\"Accuracy\" unit=\"%\" />\r\n          <Tooltip cursor={{ strokeDasharray: \"3 3\" }} />\r\n          <Legend />\r\n          <Scatter name=\"Your Attempts\" data={data} fill=\"#3b82f6\" />\r\n          {globalDot && (\r\n            <Scatter name=\"Global Avg\" data={[globalDot]} fill=\"#ef4444\" shape=\"star\" />\r\n          )}\r\n        </ScatterChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"p-6 max-w-4xl mx-auto\">\r\n      <h2 className=\"text-3xl font-bold mb-6 text-gray-800\">Your Personal Results</h2>\r\n\r\n      {renderChart(\r\n        summaryAttempts.map((r) => ({\r\n          wpm: r.realWPM,\r\n          accuracy: Math.round((r.score / r.total) * 100),\r\n        })),\r\n        \"AI Summary Attempts\",\r\n        globalAverages?.summary && {\r\n          wpm: globalAverages.summary.avgWPM,\r\n          accuracy: globalAverages.summary.avgAccuracy,\r\n        }\r\n      )}\r\n\r\n      {renderChart(\r\n        fullPassageAttempts.map((r) => ({\r\n          wpm: r.effectiveWPM,\r\n          accuracy: Math.round((r.score / r.total) * 100),\r\n        })),\r\n        \"Full Passage Attempts\",\r\n        globalAverages?.full && {\r\n          wpm: globalAverages.full.avgWPM,\r\n          accuracy: globalAverages.full.avgAccuracy,\r\n        }\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PersonalResults;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}