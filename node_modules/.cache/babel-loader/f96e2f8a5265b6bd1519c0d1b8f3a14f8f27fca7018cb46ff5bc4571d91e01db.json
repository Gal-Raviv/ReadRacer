{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tsuna\\\\reading-experiment\\\\src\\\\components\\\\PersonalResults.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { ScatterChart, Scatter, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PersonalResults = ({\n  user\n}) => {\n  _s();\n  const [summaryAttempts, setSummaryAttempts] = useState([]);\n  const [fullPassageAttempts, setFullPassageAttempts] = useState([]);\n  const [globalAverages, setGlobalAverages] = useState(null);\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const res = await fetch(`https://read-racer.azurewebsites.net/api/getUserResults?email=${user.email}`);\n        const data = await res.json();\n        const summary = data.results.filter(r => r.useSummary);\n        const full = data.results.filter(r => !r.useSummary);\n        setSummaryAttempts(summary);\n        setFullPassageAttempts(full);\n        setGlobalAverages(data.globalAverages);\n        console.log(\"Summary attempts:\", summary);\n        console.log(\"Full passage attempts:\", full);\n        console.log(\"Global averages:\", data.globalAverages);\n      } catch (err) {\n        console.error(\"Failed to load user results:\", err);\n      }\n    }\n    if (user) fetchData();\n  }, [user]);\n  const renderChart = (data, label, globalDot) => {\n    if (!data || data.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No attempts yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 44\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-xl font-semibold mb-2 text-gray-700\",\n        children: label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        width: \"100%\",\n        height: 300,\n        children: /*#__PURE__*/_jsxDEV(ScatterChart, {\n          margin: {\n            top: 10,\n            right: 20,\n            bottom: 20,\n            left: 0\n          },\n          children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            type: \"number\",\n            dataKey: \"wpm\",\n            name: \"Reading Speed\",\n            unit: \" WPM\",\n            domain: [\"auto\", \"auto\"]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n            type: \"number\",\n            dataKey: \"accuracy\",\n            name: \"Accuracy\",\n            unit: \"%\",\n            domain: [0, 100]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n            cursor: {\n              strokeDasharray: \"3 3\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Scatter, {\n            name: \"Your Attempts\",\n            data: data,\n            fill: \"#3b82f6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this), globalDot && /*#__PURE__*/_jsxDEV(Scatter, {\n            name: \"Global Avg\",\n            data: [globalDot],\n            fill: \"#ef4444\",\n            shape: \"star\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6 max-w-4xl mx-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-3xl font-bold mb-6 text-gray-800\",\n      children: \"Your Personal Results\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), renderChart(summaryAttempts.map(r => ({\n      wpm: r.realWPM,\n      accuracy: r.total > 0 ? Math.round(r.score / r.total * 100) : 0\n    })), \"AI Summary Attempts\", (globalAverages === null || globalAverages === void 0 ? void 0 : globalAverages.summary) && {\n      wpm: globalAverages.summary.avgWPM,\n      accuracy: typeof globalAverages.summary.avgAccuracy === \"number\" ? globalAverages.summary.avgAccuracy * 100 : 0\n    }), renderChart(fullPassageAttempts.map(r => ({\n      wpm: r.effectiveWPM,\n      accuracy: r.total > 0 ? Math.round(r.score / r.total * 100) : 0\n    })), \"Full Passage Attempts\", (globalAverages === null || globalAverages === void 0 ? void 0 : globalAverages.full) && {\n      wpm: globalAverages.full.avgWPM,\n      accuracy: typeof globalAverages.full.avgAccuracy === \"number\" ? globalAverages.full.avgAccuracy * 100 : 0\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s(PersonalResults, \"5nq1/Su7i0ojoNOz3zqtW2uroJE=\");\n_c = PersonalResults;\nexport default PersonalResults;\nvar _c;\n$RefreshReg$(_c, \"PersonalResults\");","map":{"version":3,"names":["React","useEffect","useState","ScatterChart","Scatter","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","PersonalResults","user","_s","summaryAttempts","setSummaryAttempts","fullPassageAttempts","setFullPassageAttempts","globalAverages","setGlobalAverages","fetchData","res","fetch","email","data","json","summary","results","filter","r","useSummary","full","console","log","err","error","renderChart","label","globalDot","length","children","fileName","_jsxFileName","lineNumber","columnNumber","className","width","height","margin","top","right","bottom","left","type","dataKey","name","unit","domain","cursor","strokeDasharray","fill","shape","map","wpm","realWPM","accuracy","total","Math","round","score","avgWPM","avgAccuracy","effectiveWPM","_c","$RefreshReg$"],"sources":["C:/Users/tsuna/reading-experiment/src/components/PersonalResults.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  ScatterChart,\r\n  Scatter,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n} from \"recharts\";\r\n\r\nconst PersonalResults = ({ user }) => {\r\n  const [summaryAttempts, setSummaryAttempts] = useState([]);\r\n  const [fullPassageAttempts, setFullPassageAttempts] = useState([]);\r\n  const [globalAverages, setGlobalAverages] = useState(null);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      try {\r\n        const res = await fetch(\r\n          `https://read-racer.azurewebsites.net/api/getUserResults?email=${user.email}`\r\n        );\r\n        const data = await res.json();\r\n\r\n        const summary = data.results.filter((r) => r.useSummary);\r\n        const full = data.results.filter((r) => !r.useSummary);\r\n        setSummaryAttempts(summary);\r\n        setFullPassageAttempts(full);\r\n        setGlobalAverages(data.globalAverages);\r\n\r\n        console.log(\"Summary attempts:\", summary);\r\n        console.log(\"Full passage attempts:\", full);\r\n        console.log(\"Global averages:\", data.globalAverages);\r\n      } catch (err) {\r\n        console.error(\"Failed to load user results:\", err);\r\n      }\r\n    }\r\n\r\n    if (user) fetchData();\r\n  }, [user]);\r\n\r\n  const renderChart = (data, label, globalDot) => {\r\n    if (!data || data.length === 0) return <p>No attempts yet.</p>;\r\n\r\n    return (\r\n      <div className=\"mb-8\">\r\n        <h3 className=\"text-xl font-semibold mb-2 text-gray-700\">{label}</h3>\r\n        <ResponsiveContainer width=\"100%\" height={300}>\r\n          <ScatterChart margin={{ top: 10, right: 20, bottom: 20, left: 0 }}>\r\n            <CartesianGrid />\r\n            <XAxis\r\n              type=\"number\"\r\n              dataKey=\"wpm\"\r\n              name=\"Reading Speed\"\r\n              unit=\" WPM\"\r\n              domain={[\"auto\", \"auto\"]}\r\n            />\r\n            <YAxis\r\n              type=\"number\"\r\n              dataKey=\"accuracy\"\r\n              name=\"Accuracy\"\r\n              unit=\"%\"\r\n              domain={[0, 100]}\r\n            />\r\n            <Tooltip cursor={{ strokeDasharray: \"3 3\" }} />\r\n            <Legend />\r\n            <Scatter name=\"Your Attempts\" data={data} fill=\"#3b82f6\" />\r\n            {globalDot && (\r\n              <Scatter\r\n                name=\"Global Avg\"\r\n                data={[globalDot]}\r\n                fill=\"#ef4444\"\r\n                shape=\"star\"\r\n              />\r\n            )}\r\n          </ScatterChart>\r\n        </ResponsiveContainer>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-6 max-w-4xl mx-auto\">\r\n      <h2 className=\"text-3xl font-bold mb-6 text-gray-800\">\r\n        Your Personal Results\r\n      </h2>\r\n\r\n      {renderChart(\r\n        summaryAttempts.map((r) => ({\r\n          wpm: r.realWPM,\r\n          accuracy: r.total > 0 ? Math.round((r.score / r.total) * 100) : 0,\r\n        })),\r\n        \"AI Summary Attempts\",\r\n        globalAverages?.summary && {\r\n          wpm: globalAverages.summary.avgWPM,\r\n          accuracy:\r\n            typeof globalAverages.summary.avgAccuracy === \"number\"\r\n              ? globalAverages.summary.avgAccuracy * 100\r\n              : 0,\r\n        }\r\n      )}\r\n\r\n      {renderChart(\r\n        fullPassageAttempts.map((r) => ({\r\n          wpm: r.effectiveWPM,\r\n          accuracy: r.total > 0 ? Math.round((r.score / r.total) * 100) : 0,\r\n        })),\r\n        \"Full Passage Attempts\",\r\n        globalAverages?.full && {\r\n          wpm: globalAverages.full.avgWPM,\r\n          accuracy:\r\n            typeof globalAverages.full.avgAccuracy === \"number\"\r\n              ? globalAverages.full.avgAccuracy * 100\r\n              : 0,\r\n        }\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PersonalResults;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}