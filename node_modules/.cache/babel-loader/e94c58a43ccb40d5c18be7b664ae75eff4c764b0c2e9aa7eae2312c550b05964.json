{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tsuna\\\\reading-experiment\\\\src\\\\components\\\\PersonalResults.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { ScatterChart, Scatter, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\n\n// Custom Tooltip to show key info only\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomTooltip = ({\n  active,\n  payload\n}) => {\n  if (active && payload && payload.length > 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white p-2 rounded shadow border text-sm\",\n      children: payload.map((entry, index) => {\n        var _entry$payload, _entry$name, _entry$name2, _ref, _data$value, _data$accuracy;\n        const data = (_entry$payload = entry.payload) !== null && _entry$payload !== void 0 ? _entry$payload : {};\n        const isGlobal = (_entry$name = entry.name) === null || _entry$name === void 0 ? void 0 : _entry$name.toLowerCase().includes(\"global avg\");\n        const isPersonal = (_entry$name2 = entry.name) === null || _entry$name2 === void 0 ? void 0 : _entry$name2.toLowerCase().includes(\"personal avg\");\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-2 border-b last:border-b-0 pb-1\",\n          children: [(isGlobal || isPersonal) && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: `text-xs font-semibold mb-1 ${isGlobal ? \"text-red-600\" : \"text-blue-600\"}`,\n            children: isGlobal ? \"Global Average\" : \"Personal Average\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Reading Speed:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 17\n            }, this), \" \", Math.round((_ref = (_data$value = data.value) !== null && _data$value !== void 0 ? _data$value : data.readingSpeed) !== null && _ref !== void 0 ? _ref : 0), \" WPM\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Accuracy:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 17\n            }, this), \" \", (((_data$accuracy = data.accuracy) !== null && _data$accuracy !== void 0 ? _data$accuracy : 0) * 100).toFixed(1), \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 15\n          }, this), typeof data.points === \"number\" && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Points:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 19\n            }, this), \" \", data.points.toFixed(2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this);\n  }\n  return null;\n};\n_c = CustomTooltip;\nconst PersonalResults = ({\n  userId\n}) => {\n  _s();\n  const [summaryAttempts, setSummaryAttempts] = useState([]);\n  const [fullPassageAttempts, setFullPassageAttempts] = useState([]);\n\n  // Separate states for personal vs global averages\n  const [personalAverages, setPersonalAverages] = useState({\n    summary: null,\n    full: null\n  });\n  const [globalAverages, setGlobalAverages] = useState({\n    summary: null,\n    full: null\n  });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [mode, setMode] = useState(\"effective\");\n  useEffect(() => {\n    if (!userId) return;\n    async function fetchData() {\n      setLoading(true);\n      setError(null);\n      try {\n        const res = await fetch(`https://read-racer.azurewebsites.net/api/getUserResults?userId=${encodeURIComponent(userId)}`);\n        if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);\n        const data = await res.json();\n        const results = data.results || [];\n        const summary = results.filter(r => r.useSummary === true || r.useSummary === \"true\" || r.useSummary === \"True\");\n        const full = results.filter(r => !(r.useSummary === true || r.useSummary === \"true\" || r.useSummary === \"True\"));\n        setSummaryAttempts(summary);\n        setFullPassageAttempts(full);\n        setPersonalAverages({\n          summary: data.summaryAvg || null,\n          full: data.passageAvg || null\n        });\n        setGlobalAverages({\n          summary: data.globalSummaryAvg || null,\n          full: data.globalPassageAvg || null\n        });\n      } catch (err) {\n        console.error(\"Failed to load user results:\", err);\n        setError(err.message || \"Failed to load user results\");\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchData();\n  }, [userId]);\n  const renderCombinedChart = () => {\n    var _ref7, _personalAverages$sum, _personalAverages$sum2, _personalAverages$sum3, _ref8, _personalAverages$sum4, _personalAverages$sum5, _personalAverages$sum6, _personalAverages$ful, _personalAverages$ful2, _ref9, _globalAverages$summa, _globalAverages$summa2, _globalAverages$summa3, _ref0, _globalAverages$summa4, _globalAverages$summa5, _globalAverages$summa6, _globalAverages$full$, _globalAverages$full, _personalAverages$sum7, _personalAverages$ful3, _globalAverages$summa7, _globalAverages$full$2;\n    if (!summaryAttempts.length && !fullPassageAttempts.length || !personalAverages) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No attempts yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 14\n      }, this);\n    }\n\n    // Prepare user attempts data points\n    const summaryData = summaryAttempts.map((a, index) => {\n      var _ref2, _ref3, _a$effectiveWPM, _ref4, _ref5, _a$realWPM, _a$points;\n      return {\n        id: index,\n        value: mode === \"effective\" ? (_ref2 = (_ref3 = (_a$effectiveWPM = a.effectiveWPM) !== null && _a$effectiveWPM !== void 0 ? _a$effectiveWPM : a.realWPM) !== null && _ref3 !== void 0 ? _ref3 : a.readingSpeed) !== null && _ref2 !== void 0 ? _ref2 : 0 : (_ref4 = (_ref5 = (_a$realWPM = a.realWPM) !== null && _a$realWPM !== void 0 ? _a$realWPM : a.effectiveWPM) !== null && _ref5 !== void 0 ? _ref5 : a.readingSpeed) !== null && _ref4 !== void 0 ? _ref4 : 0,\n        accuracy: a.total > 0 ? a.score / a.total : 0,\n        points: (_a$points = a.points) !== null && _a$points !== void 0 ? _a$points : null\n      };\n    });\n    const passageData = fullPassageAttempts.map((a, index) => {\n      var _ref6, _a$realWPM2, _a$points2;\n      return {\n        id: index + 10000,\n        value: (_ref6 = (_a$realWPM2 = a.realWPM) !== null && _a$realWPM2 !== void 0 ? _a$realWPM2 : a.readingSpeed) !== null && _ref6 !== void 0 ? _ref6 : 0,\n        accuracy: a.total > 0 ? a.score / a.total : 0,\n        points: (_a$points2 = a.points) !== null && _a$points2 !== void 0 ? _a$points2 : null\n      };\n    });\n\n    // Personal averages\n    const personalSummaryValue = mode === \"effective\" ? (_ref7 = (_personalAverages$sum = (_personalAverages$sum2 = personalAverages.summary) === null || _personalAverages$sum2 === void 0 ? void 0 : _personalAverages$sum2.effectiveWPM) !== null && _personalAverages$sum !== void 0 ? _personalAverages$sum : (_personalAverages$sum3 = personalAverages.summary) === null || _personalAverages$sum3 === void 0 ? void 0 : _personalAverages$sum3.realWPM) !== null && _ref7 !== void 0 ? _ref7 : 0 : (_ref8 = (_personalAverages$sum4 = (_personalAverages$sum5 = personalAverages.summary) === null || _personalAverages$sum5 === void 0 ? void 0 : _personalAverages$sum5.realWPM) !== null && _personalAverages$sum4 !== void 0 ? _personalAverages$sum4 : (_personalAverages$sum6 = personalAverages.summary) === null || _personalAverages$sum6 === void 0 ? void 0 : _personalAverages$sum6.effectiveWPM) !== null && _ref8 !== void 0 ? _ref8 : 0;\n    const personalPassageValue = (_personalAverages$ful = (_personalAverages$ful2 = personalAverages.full) === null || _personalAverages$ful2 === void 0 ? void 0 : _personalAverages$ful2.realWPM) !== null && _personalAverages$ful !== void 0 ? _personalAverages$ful : 0;\n\n    // Global averages\n    const globalSummaryValue = mode === \"effective\" ? (_ref9 = (_globalAverages$summa = (_globalAverages$summa2 = globalAverages.summary) === null || _globalAverages$summa2 === void 0 ? void 0 : _globalAverages$summa2.effectiveWPM) !== null && _globalAverages$summa !== void 0 ? _globalAverages$summa : (_globalAverages$summa3 = globalAverages.summary) === null || _globalAverages$summa3 === void 0 ? void 0 : _globalAverages$summa3.realWPM) !== null && _ref9 !== void 0 ? _ref9 : 0 : (_ref0 = (_globalAverages$summa4 = (_globalAverages$summa5 = globalAverages.summary) === null || _globalAverages$summa5 === void 0 ? void 0 : _globalAverages$summa5.realWPM) !== null && _globalAverages$summa4 !== void 0 ? _globalAverages$summa4 : (_globalAverages$summa6 = globalAverages.summary) === null || _globalAverages$summa6 === void 0 ? void 0 : _globalAverages$summa6.effectiveWPM) !== null && _ref0 !== void 0 ? _ref0 : 0;\n    const globalPassageValue = (_globalAverages$full$ = (_globalAverages$full = globalAverages.full) === null || _globalAverages$full === void 0 ? void 0 : _globalAverages$full.realWPM) !== null && _globalAverages$full$ !== void 0 ? _globalAverages$full$ : 0;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-xl font-semibold mb-2 text-gray-700\",\n        children: mode === \"effective\" ? \"Effective WPM (AI Summaries) vs Reading Speed (Full Passage)\" : \"Real WPM (AI Summaries) vs Reading Speed (Full Passage)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"mr-2 font-semibold\",\n          children: \"Select Graph Mode:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: mode,\n          onChange: e => setMode(e.target.value),\n          className: \"border rounded p-1\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"effective\",\n            children: \"Effective WPM (AI Summaries)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"real\",\n            children: \"Real WPM (AI Summaries)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        width: \"100%\",\n        height: 350,\n        children: /*#__PURE__*/_jsxDEV(ScatterChart, {\n          margin: {\n            top: 10,\n            right: 20,\n            bottom: 20,\n            left: 0\n          },\n          children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            type: \"number\",\n            dataKey: \"value\",\n            name: \"Reading Speed (WPM)\",\n            unit: \" WPM\",\n            domain: [\"auto\", \"auto\"]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n            type: \"number\",\n            dataKey: \"accuracy\",\n            name: \"Accuracy\",\n            domain: [0, 1],\n            tickFormatter: tick => `${(tick * 100).toFixed(0)}%`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n            content: /*#__PURE__*/_jsxDEV(CustomTooltip, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 31\n            }, this),\n            cursor: {\n              strokeDasharray: \"3 3\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Legend, {\n            formatter: value => {\n              if (value === \"AI Summaries\") return \"AI Summaries (Attempts)\";\n              if (value === \"Full Passage\") return \"Full Passage (Attempts)\";\n              if (value === \"Personal Avg AI Summaries\") return \"Your Average AI Summaries\";\n              if (value === \"Personal Avg Full Passage\") return \"Your Average Full Passage\";\n              if (value === \"Global Avg AI Summaries\") return \"Global Average AI Summaries\";\n              if (value === \"Global Avg Full Passage\") return \"Global Average Full Passage\";\n              return value;\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Scatter, {\n            name: \"AI Summaries\",\n            data: summaryData,\n            fill: \"#3b82f6\",\n            shape: \"circle\",\n            dataKey: {\n              x: \"value\",\n              y: \"accuracy\"\n            }\n          }, \"summary\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Scatter, {\n            name: \"Full Passage\",\n            data: passageData,\n            fill: \"#10b981\",\n            shape: \"circle\",\n            dataKey: {\n              x: \"value\",\n              y: \"accuracy\"\n            }\n          }, \"passage\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 13\n          }, this), personalAverages.summary && /*#__PURE__*/_jsxDEV(Scatter, {\n            name: \"Personal Avg AI Summaries\",\n            data: [{\n              value: personalSummaryValue,\n              accuracy: (_personalAverages$sum7 = personalAverages.summary.accuracy) !== null && _personalAverages$sum7 !== void 0 ? _personalAverages$sum7 : 0\n            }],\n            fill: \"#2563eb\",\n            shape: \"star\",\n            dataKey: {\n              x: \"value\",\n              y: \"accuracy\"\n            }\n          }, \"personal-avg-summary\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 15\n          }, this), personalAverages.full && /*#__PURE__*/_jsxDEV(Scatter, {\n            name: \"Personal Avg Full Passage\",\n            data: [{\n              value: personalPassageValue,\n              accuracy: (_personalAverages$ful3 = personalAverages.full.accuracy) !== null && _personalAverages$ful3 !== void 0 ? _personalAverages$ful3 : 0\n            }],\n            fill: \"#059669\",\n            shape: \"star\",\n            dataKey: {\n              x: \"value\",\n              y: \"accuracy\"\n            }\n          }, \"personal-avg-passage\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 15\n          }, this), globalAverages.summary && /*#__PURE__*/_jsxDEV(Scatter, {\n            name: \"Global Avg AI Summaries\",\n            data: [{\n              value: globalSummaryValue,\n              accuracy: (_globalAverages$summa7 = globalAverages.summary.accuracy) !== null && _globalAverages$summa7 !== void 0 ? _globalAverages$summa7 : 0\n            }],\n            fill: \"#ef4444\",\n            shape: \"diamond\",\n            dataKey: {\n              x: \"value\",\n              y: \"accuracy\"\n            }\n          }, \"global-avg-summary\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 15\n          }, this), globalAverages.full && /*#__PURE__*/_jsxDEV(Scatter, {\n            name: \"Global Avg Full Passage\",\n            data: [{\n              value: globalPassageValue,\n              accuracy: (_globalAverages$full$2 = globalAverages.full.accuracy) !== null && _globalAverages$full$2 !== void 0 ? _globalAverages$full$2 : 0\n            }],\n            fill: \"#fbbf24\",\n            shape: \"diamond\",\n            dataKey: {\n              x: \"value\",\n              y: \"accuracy\"\n            }\n          }, \"global-avg-passage\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this);\n  };\n  if (!userId) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Please log in to see your personal results.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 270,\n    columnNumber: 23\n  }, this);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading your results...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 271,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"text-red-600 font-semibold\",\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 272,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6 max-w-4xl mx-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-3xl font-bold mb-6 text-gray-800\",\n      children: \"Your Personal Results\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 7\n    }, this), renderCombinedChart()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 275,\n    columnNumber: 5\n  }, this);\n};\n_s(PersonalResults, \"2ygRUcsYXyg5sT4YpCQhaA4TIYI=\");\n_c2 = PersonalResults;\nexport default PersonalResults;\nvar _c, _c2;\n$RefreshReg$(_c, \"CustomTooltip\");\n$RefreshReg$(_c2, \"PersonalResults\");","map":{"version":3,"names":["React","useEffect","useState","ScatterChart","Scatter","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","CustomTooltip","active","payload","length","className","children","map","entry","index","_entry$payload","_entry$name","_entry$name2","_ref","_data$value","_data$accuracy","data","isGlobal","name","toLowerCase","includes","isPersonal","fileName","_jsxFileName","lineNumber","columnNumber","Math","round","value","readingSpeed","accuracy","toFixed","points","_c","PersonalResults","userId","_s","summaryAttempts","setSummaryAttempts","fullPassageAttempts","setFullPassageAttempts","personalAverages","setPersonalAverages","summary","full","globalAverages","setGlobalAverages","loading","setLoading","error","setError","mode","setMode","fetchData","res","fetch","encodeURIComponent","ok","Error","status","json","results","filter","r","useSummary","summaryAvg","passageAvg","globalSummaryAvg","globalPassageAvg","err","console","message","renderCombinedChart","_ref7","_personalAverages$sum","_personalAverages$sum2","_personalAverages$sum3","_ref8","_personalAverages$sum4","_personalAverages$sum5","_personalAverages$sum6","_personalAverages$ful","_personalAverages$ful2","_ref9","_globalAverages$summa","_globalAverages$summa2","_globalAverages$summa3","_ref0","_globalAverages$summa4","_globalAverages$summa5","_globalAverages$summa6","_globalAverages$full$","_globalAverages$full","_personalAverages$sum7","_personalAverages$ful3","_globalAverages$summa7","_globalAverages$full$2","summaryData","a","_ref2","_ref3","_a$effectiveWPM","_ref4","_ref5","_a$realWPM","_a$points","id","effectiveWPM","realWPM","total","score","passageData","_ref6","_a$realWPM2","_a$points2","personalSummaryValue","personalPassageValue","globalSummaryValue","globalPassageValue","onChange","e","target","width","height","margin","top","right","bottom","left","type","dataKey","unit","domain","tickFormatter","tick","content","cursor","strokeDasharray","formatter","fill","shape","x","y","_c2","$RefreshReg$"],"sources":["C:/Users/tsuna/reading-experiment/src/components/PersonalResults.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  ScatterChart,\r\n  Scatter,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n} from \"recharts\";\r\n\r\n// Custom Tooltip to show key info only\r\nconst CustomTooltip = ({ active, payload }) => {\r\n  if (active && payload && payload.length > 0) {\r\n    return (\r\n      <div className=\"bg-white p-2 rounded shadow border text-sm\">\r\n        {payload.map((entry, index) => {\r\n          const data = entry.payload ?? {};\r\n          const isGlobal = entry.name?.toLowerCase().includes(\"global avg\");\r\n          const isPersonal = entry.name?.toLowerCase().includes(\"personal avg\");\r\n\r\n          return (\r\n            <div key={index} className=\"mb-2 border-b last:border-b-0 pb-1\">\r\n              {(isGlobal || isPersonal) && (\r\n                <p\r\n                  className={`text-xs font-semibold mb-1 ${\r\n                    isGlobal ? \"text-red-600\" : \"text-blue-600\"\r\n                  }`}\r\n                >\r\n                  {isGlobal ? \"Global Average\" : \"Personal Average\"}\r\n                </p>\r\n              )}\r\n              <p>\r\n                <strong>Reading Speed:</strong>{\" \"}\r\n                {Math.round(data.value ?? data.readingSpeed ?? 0)} WPM\r\n              </p>\r\n              <p>\r\n                <strong>Accuracy:</strong>{\" \"}\r\n                {((data.accuracy ?? 0) * 100).toFixed(1)}%\r\n              </p>\r\n              {typeof data.points === \"number\" && (\r\n                <p>\r\n                  <strong>Points:</strong> {data.points.toFixed(2)}\r\n                </p>\r\n              )}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\nconst PersonalResults = ({ userId }) => {\r\n  const [summaryAttempts, setSummaryAttempts] = useState([]);\r\n  const [fullPassageAttempts, setFullPassageAttempts] = useState([]);\r\n\r\n  // Separate states for personal vs global averages\r\n  const [personalAverages, setPersonalAverages] = useState({ summary: null, full: null });\r\n  const [globalAverages, setGlobalAverages] = useState({ summary: null, full: null });\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [mode, setMode] = useState(\"effective\");\r\n\r\n  useEffect(() => {\r\n    if (!userId) return;\r\n\r\n    async function fetchData() {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      try {\r\n        const res = await fetch(\r\n          `https://read-racer.azurewebsites.net/api/getUserResults?userId=${encodeURIComponent(userId)}`\r\n        );\r\n        if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);\r\n        const data = await res.json();\r\n\r\n        const results = data.results || [];\r\n        const summary = results.filter(\r\n          (r) => r.useSummary === true || r.useSummary === \"true\" || r.useSummary === \"True\"\r\n        );\r\n        const full = results.filter(\r\n          (r) => !(r.useSummary === true || r.useSummary === \"true\" || r.useSummary === \"True\")\r\n        );\r\n\r\n        setSummaryAttempts(summary);\r\n        setFullPassageAttempts(full);\r\n\r\n        setPersonalAverages({\r\n          summary: data.summaryAvg || null,\r\n          full: data.passageAvg || null,\r\n        });\r\n\r\n        setGlobalAverages({\r\n          summary: data.globalSummaryAvg || null,\r\n          full: data.globalPassageAvg || null,\r\n        });\r\n      } catch (err) {\r\n        console.error(\"Failed to load user results:\", err);\r\n        setError(err.message || \"Failed to load user results\");\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }\r\n\r\n    fetchData();\r\n  }, [userId]);\r\n\r\n  const renderCombinedChart = () => {\r\n    if ((!summaryAttempts.length && !fullPassageAttempts.length) || !personalAverages) {\r\n      return <p>No attempts yet.</p>;\r\n    }\r\n\r\n    // Prepare user attempts data points\r\n    const summaryData = summaryAttempts.map((a, index) => ({\r\n      id: index,\r\n      value:\r\n        mode === \"effective\"\r\n          ? a.effectiveWPM ?? a.realWPM ?? a.readingSpeed ?? 0\r\n          : a.realWPM ?? a.effectiveWPM ?? a.readingSpeed ?? 0,\r\n      accuracy: a.total > 0 ? a.score / a.total : 0,\r\n      points: a.points ?? null,\r\n    }));\r\n\r\n    const passageData = fullPassageAttempts.map((a, index) => ({\r\n      id: index + 10000,\r\n      value: a.realWPM ?? a.readingSpeed ?? 0,\r\n      accuracy: a.total > 0 ? a.score / a.total : 0,\r\n      points: a.points ?? null,\r\n    }));\r\n\r\n    // Personal averages\r\n    const personalSummaryValue =\r\n      mode === \"effective\"\r\n        ? personalAverages.summary?.effectiveWPM ?? personalAverages.summary?.realWPM ?? 0\r\n        : personalAverages.summary?.realWPM ?? personalAverages.summary?.effectiveWPM ?? 0;\r\n\r\n    const personalPassageValue =\r\n      personalAverages.full?.realWPM ?? 0;\r\n\r\n    // Global averages\r\n    const globalSummaryValue =\r\n      mode === \"effective\"\r\n        ? globalAverages.summary?.effectiveWPM ?? globalAverages.summary?.realWPM ?? 0\r\n        : globalAverages.summary?.realWPM ?? globalAverages.summary?.effectiveWPM ?? 0;\r\n\r\n    const globalPassageValue =\r\n      globalAverages.full?.realWPM ?? 0;\r\n\r\n    return (\r\n      <div className=\"mb-8\">\r\n        <h3 className=\"text-xl font-semibold mb-2 text-gray-700\">\r\n          {mode === \"effective\"\r\n            ? \"Effective WPM (AI Summaries) vs Reading Speed (Full Passage)\"\r\n            : \"Real WPM (AI Summaries) vs Reading Speed (Full Passage)\"}\r\n        </h3>\r\n\r\n        <div className=\"mb-4\">\r\n          <label className=\"mr-2 font-semibold\">Select Graph Mode:</label>\r\n          <select\r\n            value={mode}\r\n            onChange={(e) => setMode(e.target.value)}\r\n            className=\"border rounded p-1\"\r\n          >\r\n            <option value=\"effective\">Effective WPM (AI Summaries)</option>\r\n            <option value=\"real\">Real WPM (AI Summaries)</option>\r\n          </select>\r\n        </div>\r\n\r\n        <ResponsiveContainer width=\"100%\" height={350}>\r\n          <ScatterChart margin={{ top: 10, right: 20, bottom: 20, left: 0 }}>\r\n            <CartesianGrid />\r\n            <XAxis\r\n              type=\"number\"\r\n              dataKey=\"value\"\r\n              name=\"Reading Speed (WPM)\"\r\n              unit=\" WPM\"\r\n              domain={[\"auto\", \"auto\"]}\r\n            />\r\n            <YAxis\r\n              type=\"number\"\r\n              dataKey=\"accuracy\"\r\n              name=\"Accuracy\"\r\n              domain={[0, 1]}\r\n              tickFormatter={(tick) => `${(tick * 100).toFixed(0)}%`}\r\n            />\r\n            <Tooltip content={<CustomTooltip />} cursor={{ strokeDasharray: \"3 3\" }} />\r\n            <Legend\r\n              formatter={(value) => {\r\n                if (value === \"AI Summaries\") return \"AI Summaries (Attempts)\";\r\n                if (value === \"Full Passage\") return \"Full Passage (Attempts)\";\r\n                if (value === \"Personal Avg AI Summaries\") return \"Your Average AI Summaries\";\r\n                if (value === \"Personal Avg Full Passage\") return \"Your Average Full Passage\";\r\n                if (value === \"Global Avg AI Summaries\") return \"Global Average AI Summaries\";\r\n                if (value === \"Global Avg Full Passage\") return \"Global Average Full Passage\";\r\n                return value;\r\n              }}\r\n            />\r\n            {/* User Attempts */}\r\n            <Scatter\r\n              name=\"AI Summaries\"\r\n              data={summaryData}\r\n              fill=\"#3b82f6\"\r\n              shape=\"circle\"\r\n              key=\"summary\"\r\n              dataKey={{ x: \"value\", y: \"accuracy\" }}\r\n            />\r\n            <Scatter\r\n              name=\"Full Passage\"\r\n              data={passageData}\r\n              fill=\"#10b981\"\r\n              shape=\"circle\"\r\n              key=\"passage\"\r\n              dataKey={{ x: \"value\", y: \"accuracy\" }}\r\n            />\r\n\r\n            {/* Personal averages */}\r\n            {personalAverages.summary && (\r\n              <Scatter\r\n                name=\"Personal Avg AI Summaries\"\r\n                data={[{ value: personalSummaryValue, accuracy: personalAverages.summary.accuracy ?? 0 }]}\r\n                fill=\"#2563eb\"\r\n                shape=\"star\"\r\n                key=\"personal-avg-summary\"\r\n                dataKey={{ x: \"value\", y: \"accuracy\" }}\r\n              />\r\n            )}\r\n            {personalAverages.full && (\r\n              <Scatter\r\n                name=\"Personal Avg Full Passage\"\r\n                data={[{ value: personalPassageValue, accuracy: personalAverages.full.accuracy ?? 0 }]}\r\n                fill=\"#059669\"\r\n                shape=\"star\"\r\n                key=\"personal-avg-passage\"\r\n                dataKey={{ x: \"value\", y: \"accuracy\" }}\r\n              />\r\n            )}\r\n\r\n            {/* Global averages */}\r\n            {globalAverages.summary && (\r\n              <Scatter\r\n                name=\"Global Avg AI Summaries\"\r\n                data={[{ value: globalSummaryValue, accuracy: globalAverages.summary.accuracy ?? 0 }]}\r\n                fill=\"#ef4444\"\r\n                shape=\"diamond\"\r\n                key=\"global-avg-summary\"\r\n                dataKey={{ x: \"value\", y: \"accuracy\" }}\r\n              />\r\n            )}\r\n            {globalAverages.full && (\r\n              <Scatter\r\n                name=\"Global Avg Full Passage\"\r\n                data={[{ value: globalPassageValue, accuracy: globalAverages.full.accuracy ?? 0 }]}\r\n                fill=\"#fbbf24\"\r\n                shape=\"diamond\"\r\n                key=\"global-avg-passage\"\r\n                dataKey={{ x: \"value\", y: \"accuracy\" }}\r\n              />\r\n            )}\r\n          </ScatterChart>\r\n        </ResponsiveContainer>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  if (!userId) return <p>Please log in to see your personal results.</p>;\r\n  if (loading) return <p>Loading your results...</p>;\r\n  if (error) return <p className=\"text-red-600 font-semibold\">Error: {error}</p>;\r\n\r\n  return (\r\n    <div className=\"p-6 max-w-4xl mx-auto\">\r\n      <h2 className=\"text-3xl font-bold mb-6 text-gray-800\">Your Personal Results</h2>\r\n      {renderCombinedChart()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PersonalResults;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}