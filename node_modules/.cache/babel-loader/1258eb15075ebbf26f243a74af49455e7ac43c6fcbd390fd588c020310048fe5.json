{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tsuna\\\\reading-experiment\\\\src\\\\components\\\\PersonalResults.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { ScatterChart, Scatter, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\n\n// Custom Tooltip to show key info only\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomTooltip = ({\n  active,\n  payload\n}) => {\n  if (active && payload && payload.length > 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white p-2 rounded shadow border text-sm\",\n      children: payload.map((entry, index) => {\n        var _entry$payload, _entry$name, _ref, _data$value, _data$accuracy;\n        const data = (_entry$payload = entry.payload) !== null && _entry$payload !== void 0 ? _entry$payload : {};\n        const isAverage = (_entry$name = entry.name) === null || _entry$name === void 0 ? void 0 : _entry$name.toLowerCase().includes(\"avg\");\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-2 border-b last:border-b-0 pb-1\",\n          children: [isAverage && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-xs text-red-600 font-semibold mb-1\",\n            children: entry.name.includes(\"Personal\") ? \"Personal Average\" : \"Global Average\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Reading Speed:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 30,\n              columnNumber: 17\n            }, this), \" \", Math.round((_ref = (_data$value = data.value) !== null && _data$value !== void 0 ? _data$value : data.readingSpeed) !== null && _ref !== void 0 ? _ref : 0), \" WPM\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Accuracy:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 17\n            }, this), \" \", (((_data$accuracy = data.accuracy) !== null && _data$accuracy !== void 0 ? _data$accuracy : 0) * 100).toFixed(1), \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 15\n          }, this), typeof data.points === \"number\" && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Points:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 19\n            }, this), \" \", data.points.toFixed(2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this);\n  }\n  return null;\n};\n_c = CustomTooltip;\nconst PersonalResults = ({\n  userId\n}) => {\n  _s();\n  var _ref7, _ref8, _personalAverages$sum, _personalAverages$sum2, _personalAverages$sum3, _personalAverages$sum4, _ref9, _ref0, _personalAverages$sum5, _personalAverages$sum6, _personalAverages$sum7, _personalAverages$sum8, _ref1, _personalAverages$ful, _personalAverages$ful2, _personalAverages$ful3, _ref10, _ref11, _globalAverages$summa, _globalAverages$summa2, _globalAverages$summa3, _globalAverages$summa4, _ref12, _ref13, _globalAverages$summa5, _globalAverages$summa6, _globalAverages$summa7, _globalAverages$summa8, _ref14, _globalAverages$full$, _globalAverages$full, _globalAverages$full2, _personalAverages$sum9, _personalAverages$ful4, _globalAverages$summa9, _globalAverages$full$2;\n  const [summaryAttempts, setSummaryAttempts] = useState([]);\n  const [fullPassageAttempts, setFullPassageAttempts] = useState([]);\n  const [personalAverages, setPersonalAverages] = useState({\n    summary: null,\n    full: null\n  });\n  const [globalAverages, setGlobalAverages] = useState({\n    summary: null,\n    full: null\n  });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [mode, setMode] = useState(\"effective\");\n\n  // Show/hide toggles for averages only\n  const [showPersonalAvg, setShowPersonalAvg] = useState(false);\n  const [showGlobalAvg, setShowGlobalAvg] = useState(false);\n  useEffect(() => {\n    if (!userId) return;\n    async function fetchData() {\n      setLoading(true);\n      setError(null);\n      try {\n        const res = await fetch(`https://read-racer.azurewebsites.net/api/getUserResults?userId=${encodeURIComponent(userId)}`);\n        if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);\n        const data = await res.json();\n        const results = Array.isArray(data) ? data : data.results || [];\n        const summary = results.filter(r => r.useSummary === true || r.useSummary === \"true\" || r.useSummary === \"True\");\n        const full = results.filter(r => !(r.useSummary === true || r.useSummary === \"true\" || r.useSummary === \"True\"));\n        setSummaryAttempts(summary);\n        setFullPassageAttempts(full);\n\n        // Set personal averages from user data\n        setPersonalAverages({\n          summary: data.summaryAvg || null,\n          full: data.passageAvg || null\n        });\n\n        // Fetch global averages separately for showing global avg stars\n        const globalRes = await fetch(`https://read-racer.azurewebsites.net/api/getGlobalStats`);\n        if (!globalRes.ok) throw new Error(`Global stats HTTP error! status: ${globalRes.status}`);\n        const globalData = await globalRes.json();\n        setGlobalAverages({\n          summary: globalData.summaryAvg || null,\n          full: globalData.passageAvg || null\n        });\n      } catch (err) {\n        console.error(\"Failed to load results:\", err);\n        setError(err.message || \"Failed to load results\");\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchData();\n  }, [userId]);\n  if (!userId) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Please log in to see your personal results.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 23\n  }, this);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading your results...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"text-red-600 font-semibold\",\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 21\n  }, this);\n\n  // Prepare personal attempts data (always shown)\n  const summaryData = summaryAttempts.map((a, index) => {\n    var _ref2, _ref3, _a$effectiveWPM, _ref4, _ref5, _a$realWPM, _a$points;\n    return {\n      id: index,\n      value: mode === \"effective\" ? (_ref2 = (_ref3 = (_a$effectiveWPM = a.effectiveWPM) !== null && _a$effectiveWPM !== void 0 ? _a$effectiveWPM : a.realWPM) !== null && _ref3 !== void 0 ? _ref3 : a.readingSpeed) !== null && _ref2 !== void 0 ? _ref2 : 0 : (_ref4 = (_ref5 = (_a$realWPM = a.realWPM) !== null && _a$realWPM !== void 0 ? _a$realWPM : a.effectiveWPM) !== null && _ref5 !== void 0 ? _ref5 : a.readingSpeed) !== null && _ref4 !== void 0 ? _ref4 : 0,\n      accuracy: a.total > 0 ? a.score / a.total : 0,\n      points: (_a$points = a.points) !== null && _a$points !== void 0 ? _a$points : null\n    };\n  });\n  const passageData = fullPassageAttempts.map((a, index) => {\n    var _ref6, _a$realWPM2, _a$points2;\n    return {\n      id: index + 10000,\n      value: (_ref6 = (_a$realWPM2 = a.realWPM) !== null && _a$realWPM2 !== void 0 ? _a$realWPM2 : a.readingSpeed) !== null && _ref6 !== void 0 ? _ref6 : 0,\n      accuracy: a.total > 0 ? a.score / a.total : 0,\n      points: (_a$points2 = a.points) !== null && _a$points2 !== void 0 ? _a$points2 : null\n    };\n  });\n\n  // Prepare averages values\n  const personalSummaryAvgValue = mode === \"effective\" ? (_ref7 = (_ref8 = (_personalAverages$sum = (_personalAverages$sum2 = personalAverages.summary) === null || _personalAverages$sum2 === void 0 ? void 0 : _personalAverages$sum2.effectiveWPM) !== null && _personalAverages$sum !== void 0 ? _personalAverages$sum : (_personalAverages$sum3 = personalAverages.summary) === null || _personalAverages$sum3 === void 0 ? void 0 : _personalAverages$sum3.realWPM) !== null && _ref8 !== void 0 ? _ref8 : (_personalAverages$sum4 = personalAverages.summary) === null || _personalAverages$sum4 === void 0 ? void 0 : _personalAverages$sum4.readingSpeed) !== null && _ref7 !== void 0 ? _ref7 : 0 : (_ref9 = (_ref0 = (_personalAverages$sum5 = (_personalAverages$sum6 = personalAverages.summary) === null || _personalAverages$sum6 === void 0 ? void 0 : _personalAverages$sum6.realWPM) !== null && _personalAverages$sum5 !== void 0 ? _personalAverages$sum5 : (_personalAverages$sum7 = personalAverages.summary) === null || _personalAverages$sum7 === void 0 ? void 0 : _personalAverages$sum7.effectiveWPM) !== null && _ref0 !== void 0 ? _ref0 : (_personalAverages$sum8 = personalAverages.summary) === null || _personalAverages$sum8 === void 0 ? void 0 : _personalAverages$sum8.readingSpeed) !== null && _ref9 !== void 0 ? _ref9 : 0;\n  const personalPassageAvgValue = (_ref1 = (_personalAverages$ful = (_personalAverages$ful2 = personalAverages.full) === null || _personalAverages$ful2 === void 0 ? void 0 : _personalAverages$ful2.realWPM) !== null && _personalAverages$ful !== void 0 ? _personalAverages$ful : (_personalAverages$ful3 = personalAverages.full) === null || _personalAverages$ful3 === void 0 ? void 0 : _personalAverages$ful3.readingSpeed) !== null && _ref1 !== void 0 ? _ref1 : 0;\n  const globalSummaryAvgValue = mode === \"effective\" ? (_ref10 = (_ref11 = (_globalAverages$summa = (_globalAverages$summa2 = globalAverages.summary) === null || _globalAverages$summa2 === void 0 ? void 0 : _globalAverages$summa2.effectiveWPM) !== null && _globalAverages$summa !== void 0 ? _globalAverages$summa : (_globalAverages$summa3 = globalAverages.summary) === null || _globalAverages$summa3 === void 0 ? void 0 : _globalAverages$summa3.realWPM) !== null && _ref11 !== void 0 ? _ref11 : (_globalAverages$summa4 = globalAverages.summary) === null || _globalAverages$summa4 === void 0 ? void 0 : _globalAverages$summa4.readingSpeed) !== null && _ref10 !== void 0 ? _ref10 : 0 : (_ref12 = (_ref13 = (_globalAverages$summa5 = (_globalAverages$summa6 = globalAverages.summary) === null || _globalAverages$summa6 === void 0 ? void 0 : _globalAverages$summa6.realWPM) !== null && _globalAverages$summa5 !== void 0 ? _globalAverages$summa5 : (_globalAverages$summa7 = globalAverages.summary) === null || _globalAverages$summa7 === void 0 ? void 0 : _globalAverages$summa7.effectiveWPM) !== null && _ref13 !== void 0 ? _ref13 : (_globalAverages$summa8 = globalAverages.summary) === null || _globalAverages$summa8 === void 0 ? void 0 : _globalAverages$summa8.readingSpeed) !== null && _ref12 !== void 0 ? _ref12 : 0;\n  const globalPassageAvgValue = (_ref14 = (_globalAverages$full$ = (_globalAverages$full = globalAverages.full) === null || _globalAverages$full === void 0 ? void 0 : _globalAverages$full.realWPM) !== null && _globalAverages$full$ !== void 0 ? _globalAverages$full$ : (_globalAverages$full2 = globalAverages.full) === null || _globalAverages$full2 === void 0 ? void 0 : _globalAverages$full2.readingSpeed) !== null && _ref14 !== void 0 ? _ref14 : 0;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6 max-w-4xl mx-auto space-y-8\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-3xl font-bold text-center\",\n      children: \"Your Personal Results\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4 flex flex-wrap justify-center items-center gap-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"inline-flex items-center space-x-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: showPersonalAvg,\n          onChange: () => setShowPersonalAvg(prev => !prev),\n          className: \"form-checkbox h-5 w-5 rounded\",\n          style: {\n            accentColor: \"#2563eb\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Show Personal Averages\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"inline-flex items-center space-x-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: showGlobalAvg,\n          onChange: () => setShowGlobalAvg(prev => !prev),\n          className: \"form-checkbox h-5 w-5 rounded\",\n          style: {\n            accentColor: \"#2563eb\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Show Global Averages\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"inline-flex items-center space-x-2 ml-auto\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"font-semibold\",\n          children: \"Select Graph Mode:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: mode,\n          onChange: e => setMode(e.target.value),\n          className: \"border rounded p-1\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"effective\",\n            children: \"Effective WPM (AI Summaries)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"real\",\n            children: \"Real WPM (AI Summaries)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 350,\n      children: /*#__PURE__*/_jsxDEV(ScatterChart, {\n        margin: {\n          top: 10,\n          right: 20,\n          bottom: 20,\n          left: 0\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          type: \"number\",\n          dataKey: \"value\",\n          name: \"Reading Speed (WPM)\",\n          unit: \" WPM\",\n          domain: [\"auto\", \"auto\"]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          type: \"number\",\n          dataKey: \"accuracy\",\n          name: \"Accuracy\",\n          domain: [0, 1],\n          tickFormatter: tick => `${(tick * 100).toFixed(0)}%`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          content: /*#__PURE__*/_jsxDEV(CustomTooltip, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 29\n          }, this),\n          cursor: {\n            strokeDasharray: \"3 3\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {\n          formatter: value => {\n            if (value === \"AI Summaries\") return \"AI Summaries (Attempts)\";\n            if (value === \"Full Passage\") return \"Full Passage (Attempts)\";\n            if (value === \"Avg Personal AI Summaries\") return \"Personal Average AI Summaries\";\n            if (value === \"Avg Personal Full Passage\") return \"Personal Average Full Passage\";\n            if (value === \"Avg Global AI Summaries\") return \"Global Average AI Summaries\";\n            if (value === \"Avg Global Full Passage\") return \"Global Average Full Passage\";\n            return value;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Scatter, {\n          name: \"AI Summaries\",\n          data: summaryData,\n          fill: \"#3b82f6\",\n          shape: \"circle\",\n          dataKey: {\n            x: \"value\",\n            y: \"accuracy\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Scatter, {\n          name: \"Full Passage\",\n          data: passageData,\n          fill: \"#10b981\",\n          shape: \"circle\",\n          dataKey: {\n            x: \"value\",\n            y: \"accuracy\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 11\n        }, this), showPersonalAvg && personalAverages.summary && /*#__PURE__*/_jsxDEV(Scatter, {\n          name: \"Avg Personal AI Summaries\",\n          data: [{\n            value: personalSummaryAvgValue,\n            accuracy: (_personalAverages$sum9 = personalAverages.summary.accuracy) !== null && _personalAverages$sum9 !== void 0 ? _personalAverages$sum9 : 0\n          }],\n          fill: \"#ef4444\",\n          shape: \"star\",\n          dataKey: {\n            x: \"value\",\n            y: \"accuracy\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 13\n        }, this), showPersonalAvg && personalAverages.full && /*#__PURE__*/_jsxDEV(Scatter, {\n          name: \"Avg Personal Full Passage\",\n          data: [{\n            value: personalPassageAvgValue,\n            accuracy: (_personalAverages$ful4 = personalAverages.full.accuracy) !== null && _personalAverages$ful4 !== void 0 ? _personalAverages$ful4 : 0\n          }],\n          fill: \"#fbbf24\",\n          shape: \"star\",\n          dataKey: {\n            x: \"value\",\n            y: \"accuracy\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 13\n        }, this), showGlobalAvg && globalAverages.summary && /*#__PURE__*/_jsxDEV(Scatter, {\n          name: \"Avg Global AI Summaries\",\n          data: [{\n            value: globalSummaryAvgValue,\n            accuracy: (_globalAverages$summa9 = globalAverages.summary.accuracy) !== null && _globalAverages$summa9 !== void 0 ? _globalAverages$summa9 : 0\n          }],\n          fill: \"#a855f7\",\n          shape: \"diamond\",\n          dataKey: {\n            x: \"value\",\n            y: \"accuracy\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 13\n        }, this), showGlobalAvg && globalAverages.full && /*#__PURE__*/_jsxDEV(Scatter, {\n          name: \"Avg Global Full Passage\",\n          data: [{\n            value: globalPassageAvgValue,\n            accuracy: (_globalAverages$full$2 = globalAverages.full.accuracy) !== null && _globalAverages$full$2 !== void 0 ? _globalAverages$full$2 : 0\n          }],\n          fill: \"#f97316\",\n          shape: \"diamond\",\n          dataKey: {\n            x: \"value\",\n            y: \"accuracy\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 5\n  }, this);\n};\n_s(PersonalResults, \"blsDKUTy2myL9kWp8Kp43rIQovM=\");\n_c2 = PersonalResults;\nexport default PersonalResults;\nvar _c, _c2;\n$RefreshReg$(_c, \"CustomTooltip\");\n$RefreshReg$(_c2, \"PersonalResults\");","map":{"version":3,"names":["React","useEffect","useState","ScatterChart","Scatter","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","CustomTooltip","active","payload","length","className","children","map","entry","index","_entry$payload","_entry$name","_ref","_data$value","_data$accuracy","data","isAverage","name","toLowerCase","includes","fileName","_jsxFileName","lineNumber","columnNumber","Math","round","value","readingSpeed","accuracy","toFixed","points","_c","PersonalResults","userId","_s","_ref7","_ref8","_personalAverages$sum","_personalAverages$sum2","_personalAverages$sum3","_personalAverages$sum4","_ref9","_ref0","_personalAverages$sum5","_personalAverages$sum6","_personalAverages$sum7","_personalAverages$sum8","_ref1","_personalAverages$ful","_personalAverages$ful2","_personalAverages$ful3","_ref10","_ref11","_globalAverages$summa","_globalAverages$summa2","_globalAverages$summa3","_globalAverages$summa4","_ref12","_ref13","_globalAverages$summa5","_globalAverages$summa6","_globalAverages$summa7","_globalAverages$summa8","_ref14","_globalAverages$full$","_globalAverages$full","_globalAverages$full2","_personalAverages$sum9","_personalAverages$ful4","_globalAverages$summa9","_globalAverages$full$2","summaryAttempts","setSummaryAttempts","fullPassageAttempts","setFullPassageAttempts","personalAverages","setPersonalAverages","summary","full","globalAverages","setGlobalAverages","loading","setLoading","error","setError","mode","setMode","showPersonalAvg","setShowPersonalAvg","showGlobalAvg","setShowGlobalAvg","fetchData","res","fetch","encodeURIComponent","ok","Error","status","json","results","Array","isArray","filter","r","useSummary","summaryAvg","passageAvg","globalRes","globalData","err","console","message","summaryData","a","_ref2","_ref3","_a$effectiveWPM","_ref4","_ref5","_a$realWPM","_a$points","id","effectiveWPM","realWPM","total","score","passageData","_ref6","_a$realWPM2","_a$points2","personalSummaryAvgValue","personalPassageAvgValue","globalSummaryAvgValue","globalPassageAvgValue","type","checked","onChange","prev","style","accentColor","e","target","width","height","margin","top","right","bottom","left","dataKey","unit","domain","tickFormatter","tick","content","cursor","strokeDasharray","formatter","fill","shape","x","y","_c2","$RefreshReg$"],"sources":["C:/Users/tsuna/reading-experiment/src/components/PersonalResults.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  ScatterChart,\r\n  Scatter,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n} from \"recharts\";\r\n\r\n// Custom Tooltip to show key info only\r\nconst CustomTooltip = ({ active, payload }) => {\r\n  if (active && payload && payload.length > 0) {\r\n    return (\r\n      <div className=\"bg-white p-2 rounded shadow border text-sm\">\r\n        {payload.map((entry, index) => {\r\n          const data = entry.payload ?? {};\r\n          const isAverage = entry.name?.toLowerCase().includes(\"avg\");\r\n\r\n          return (\r\n            <div key={index} className=\"mb-2 border-b last:border-b-0 pb-1\">\r\n              {isAverage && (\r\n                <p className=\"text-xs text-red-600 font-semibold mb-1\">\r\n                  {entry.name.includes(\"Personal\") ? \"Personal Average\" : \"Global Average\"}\r\n                </p>\r\n              )}\r\n              <p>\r\n                <strong>Reading Speed:</strong>{\" \"}\r\n                {Math.round(data.value ?? data.readingSpeed ?? 0)} WPM\r\n              </p>\r\n              <p>\r\n                <strong>Accuracy:</strong>{\" \"}\r\n                {((data.accuracy ?? 0) * 100).toFixed(1)}%\r\n              </p>\r\n              {typeof data.points === \"number\" && (\r\n                <p>\r\n                  <strong>Points:</strong> {data.points.toFixed(2)}\r\n                </p>\r\n              )}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\nconst PersonalResults = ({ userId }) => {\r\n  const [summaryAttempts, setSummaryAttempts] = useState([]);\r\n  const [fullPassageAttempts, setFullPassageAttempts] = useState([]);\r\n  const [personalAverages, setPersonalAverages] = useState({ summary: null, full: null });\r\n  const [globalAverages, setGlobalAverages] = useState({ summary: null, full: null });\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const [mode, setMode] = useState(\"effective\");\r\n\r\n  // Show/hide toggles for averages only\r\n  const [showPersonalAvg, setShowPersonalAvg] = useState(false);\r\n  const [showGlobalAvg, setShowGlobalAvg] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!userId) return;\r\n\r\n    async function fetchData() {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      try {\r\n        const res = await fetch(\r\n          `https://read-racer.azurewebsites.net/api/getUserResults?userId=${encodeURIComponent(userId)}`\r\n        );\r\n        if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);\r\n        const data = await res.json();\r\n\r\n        const results = Array.isArray(data) ? data : data.results || [];\r\n        const summary = results.filter(\r\n          (r) => r.useSummary === true || r.useSummary === \"true\" || r.useSummary === \"True\"\r\n        );\r\n        const full = results.filter(\r\n          (r) => !(r.useSummary === true || r.useSummary === \"true\" || r.useSummary === \"True\")\r\n        );\r\n\r\n        setSummaryAttempts(summary);\r\n        setFullPassageAttempts(full);\r\n\r\n        // Set personal averages from user data\r\n        setPersonalAverages({\r\n          summary: data.summaryAvg || null,\r\n          full: data.passageAvg || null,\r\n        });\r\n\r\n        // Fetch global averages separately for showing global avg stars\r\n        const globalRes = await fetch(\r\n          `https://read-racer.azurewebsites.net/api/getGlobalStats`\r\n        );\r\n        if (!globalRes.ok) throw new Error(`Global stats HTTP error! status: ${globalRes.status}`);\r\n        const globalData = await globalRes.json();\r\n\r\n        setGlobalAverages({\r\n          summary: globalData.summaryAvg || null,\r\n          full: globalData.passageAvg || null,\r\n        });\r\n      } catch (err) {\r\n        console.error(\"Failed to load results:\", err);\r\n        setError(err.message || \"Failed to load results\");\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }\r\n\r\n    fetchData();\r\n  }, [userId]);\r\n\r\n  if (!userId) return <p>Please log in to see your personal results.</p>;\r\n  if (loading) return <p>Loading your results...</p>;\r\n  if (error) return <p className=\"text-red-600 font-semibold\">Error: {error}</p>;\r\n\r\n  // Prepare personal attempts data (always shown)\r\n  const summaryData = summaryAttempts.map((a, index) => ({\r\n    id: index,\r\n    value:\r\n      mode === \"effective\"\r\n        ? a.effectiveWPM ?? a.realWPM ?? a.readingSpeed ?? 0\r\n        : a.realWPM ?? a.effectiveWPM ?? a.readingSpeed ?? 0,\r\n    accuracy: a.total > 0 ? a.score / a.total : 0,\r\n    points: a.points ?? null,\r\n  }));\r\n\r\n  const passageData = fullPassageAttempts.map((a, index) => ({\r\n    id: index + 10000,\r\n    value: a.realWPM ?? a.readingSpeed ?? 0,\r\n    accuracy: a.total > 0 ? a.score / a.total : 0,\r\n    points: a.points ?? null,\r\n  }));\r\n\r\n  // Prepare averages values\r\n  const personalSummaryAvgValue =\r\n    mode === \"effective\"\r\n      ? personalAverages.summary?.effectiveWPM ?? personalAverages.summary?.realWPM ?? personalAverages.summary?.readingSpeed ?? 0\r\n      : personalAverages.summary?.realWPM ?? personalAverages.summary?.effectiveWPM ?? personalAverages.summary?.readingSpeed ?? 0;\r\n\r\n  const personalPassageAvgValue =\r\n    personalAverages.full?.realWPM ?? personalAverages.full?.readingSpeed ?? 0;\r\n\r\n  const globalSummaryAvgValue =\r\n    mode === \"effective\"\r\n      ? globalAverages.summary?.effectiveWPM ?? globalAverages.summary?.realWPM ?? globalAverages.summary?.readingSpeed ?? 0\r\n      : globalAverages.summary?.realWPM ?? globalAverages.summary?.effectiveWPM ?? globalAverages.summary?.readingSpeed ?? 0;\r\n\r\n  const globalPassageAvgValue =\r\n    globalAverages.full?.realWPM ?? globalAverages.full?.readingSpeed ?? 0;\r\n\r\n  return (\r\n    <div className=\"p-6 max-w-4xl mx-auto space-y-8\">\r\n      <h2 className=\"text-3xl font-bold text-center\">Your Personal Results</h2>\r\n\r\n      {/* Controls: toggles for averages and mode */}\r\n      <div className=\"mb-4 flex flex-wrap justify-center items-center gap-6\">\r\n        <label className=\"inline-flex items-center space-x-2\">\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={showPersonalAvg}\r\n            onChange={() => setShowPersonalAvg((prev) => !prev)}\r\n            className=\"form-checkbox h-5 w-5 rounded\"\r\n            style={{ accentColor: \"#2563eb\" }}\r\n          />\r\n          <span>Show Personal Averages</span>\r\n        </label>\r\n\r\n        <label className=\"inline-flex items-center space-x-2\">\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={showGlobalAvg}\r\n            onChange={() => setShowGlobalAvg((prev) => !prev)}\r\n            className=\"form-checkbox h-5 w-5 rounded\"\r\n            style={{ accentColor: \"#2563eb\" }}\r\n          />\r\n          <span>Show Global Averages</span>\r\n        </label>\r\n\r\n        <label className=\"inline-flex items-center space-x-2 ml-auto\">\r\n          <span className=\"font-semibold\">Select Graph Mode:</span>\r\n          <select\r\n            value={mode}\r\n            onChange={(e) => setMode(e.target.value)}\r\n            className=\"border rounded p-1\"\r\n          >\r\n            <option value=\"effective\">Effective WPM (AI Summaries)</option>\r\n            <option value=\"real\">Real WPM (AI Summaries)</option>\r\n          </select>\r\n        </label>\r\n      </div>\r\n\r\n      <ResponsiveContainer width=\"100%\" height={350}>\r\n        <ScatterChart margin={{ top: 10, right: 20, bottom: 20, left: 0 }}>\r\n          <CartesianGrid />\r\n          <XAxis\r\n            type=\"number\"\r\n            dataKey=\"value\"\r\n            name=\"Reading Speed (WPM)\"\r\n            unit=\" WPM\"\r\n            domain={[\"auto\", \"auto\"]}\r\n          />\r\n          <YAxis\r\n            type=\"number\"\r\n            dataKey=\"accuracy\"\r\n            name=\"Accuracy\"\r\n            domain={[0, 1]}\r\n            tickFormatter={(tick) => `${(tick * 100).toFixed(0)}%`}\r\n          />\r\n          <Tooltip content={<CustomTooltip />} cursor={{ strokeDasharray: \"3 3\" }} />\r\n          <Legend\r\n            formatter={(value) => {\r\n              if (value === \"AI Summaries\") return \"AI Summaries (Attempts)\";\r\n              if (value === \"Full Passage\") return \"Full Passage (Attempts)\";\r\n              if (value === \"Avg Personal AI Summaries\") return \"Personal Average AI Summaries\";\r\n              if (value === \"Avg Personal Full Passage\") return \"Personal Average Full Passage\";\r\n              if (value === \"Avg Global AI Summaries\") return \"Global Average AI Summaries\";\r\n              if (value === \"Avg Global Full Passage\") return \"Global Average Full Passage\";\r\n              return value;\r\n            }}\r\n          />\r\n\r\n          {/* Always show personal attempts */}\r\n          <Scatter\r\n            name=\"AI Summaries\"\r\n            data={summaryData}\r\n            fill=\"#3b82f6\"\r\n            shape=\"circle\"\r\n            dataKey={{ x: \"value\", y: \"accuracy\" }}\r\n          />\r\n          <Scatter\r\n            name=\"Full Passage\"\r\n            data={passageData}\r\n            fill=\"#10b981\"\r\n            shape=\"circle\"\r\n            dataKey={{ x: \"value\", y: \"accuracy\" }}\r\n          />\r\n\r\n          {/* Personal averages */}\r\n          {showPersonalAvg && personalAverages.summary && (\r\n            <Scatter\r\n              name=\"Avg Personal AI Summaries\"\r\n              data={[{ value: personalSummaryAvgValue, accuracy: personalAverages.summary.accuracy ?? 0 }]}\r\n              fill=\"#ef4444\"\r\n              shape=\"star\"\r\n              dataKey={{ x: \"value\", y: \"accuracy\" }}\r\n            />\r\n          )}\r\n          {showPersonalAvg && personalAverages.full && (\r\n            <Scatter\r\n              name=\"Avg Personal Full Passage\"\r\n              data={[{ value: personalPassageAvgValue, accuracy: personalAverages.full.accuracy ?? 0 }]}\r\n              fill=\"#fbbf24\"\r\n              shape=\"star\"\r\n              dataKey={{ x: \"value\", y: \"accuracy\" }}\r\n            />\r\n          )}\r\n\r\n          {/* Global averages */}\r\n          {showGlobalAvg && globalAverages.summary && (\r\n            <Scatter\r\n              name=\"Avg Global AI Summaries\"\r\n              data={[{ value: globalSummaryAvgValue, accuracy: globalAverages.summary.accuracy ?? 0 }]}\r\n              fill=\"#a855f7\"\r\n              shape=\"diamond\"\r\n              dataKey={{ x: \"value\", y: \"accuracy\" }}\r\n            />\r\n          )}\r\n          {showGlobalAvg && globalAverages.full && (\r\n            <Scatter\r\n              name=\"Avg Global Full Passage\"\r\n              data={[{ value: globalPassageAvgValue, accuracy: globalAverages.full.accuracy ?? 0 }]}\r\n              fill=\"#f97316\"\r\n              shape=\"diamond\"\r\n              dataKey={{ x: \"value\", y: \"accuracy\" }}\r\n            />\r\n          )}\r\n        </ScatterChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PersonalResults;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}