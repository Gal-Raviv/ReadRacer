{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tsuna\\\\reading-experiment\\\\src\\\\experiment\\\\ExperimentFullText.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExperimentFullText = ({\n  onFinish\n}) => {\n  _s();\n  const [startTime, setStartTime] = useState(null);\n  const [fullText, setFullText] = useState('');\n  const [text, setText] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [showSummary, setShowSummary] = useState(false);\n  const topics = [\"Write a short passage about the immune system.\", \"Write a short passage about neural engineering.\", \"Write a short passage about renewable energy.\", \"Write a short passage about climate change.\", \"Write a short passage about the brain's plasticity.\"];\n  useEffect(() => {\n    setStartTime(Date.now());\n    const randomPrompt = topics[Math.floor(Math.random() * topics.length)];\n    const doSummary = Math.random() < 0.5; // 50% chance for summary\n    setShowSummary(doSummary);\n    async function fetchContent() {\n      try {\n        // Step 1: Get full passage from generateContent API\n        const response = await fetch('http://localhost:7071/api//generateContent', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            prompt: randomPrompt\n          })\n        });\n        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n        const data = await response.json();\n        const fetchedFullText = data.generatedText || 'No content generated.';\n        setFullText(fetchedFullText);\n        if (doSummary) {\n          setText(fetchedFullText); // show full text immediately\n\n          // Step 2: Get summary from summarizeText API\n          const summaryResponse = await fetch('https://read-racer.azurewebsites.net/api/summarizeText', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              text: fetchedFullText\n            })\n          });\n          if (!summaryResponse.ok) throw new Error(`HTTP error! status: ${summaryResponse.status}`);\n          const summaryData = await summaryResponse.json();\n\n          // Assume backend returns { generatedText: \"summary here\" }\n          setText(summaryData.generatedText || 'No summary generated.');\n        } else {\n          setText(fetchedFullText);\n        }\n      } catch (err) {\n        setError('Failed to load passage. Please try again.');\n        console.error(err);\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchContent();\n  }, []);\n  const handleFinishReading = () => {\n    const endTime = Date.now();\n    const timeInSeconds = Math.round((endTime - startTime) / 1000);\n    onFinish(timeInSeconds);\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen flex justify-center items-center\",\n    children: \"Loading passage...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen flex justify-center items-center text-red-600\",\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gray-50 flex flex-col justify-center items-center px-4 py-12\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-3xl w-full bg-white rounded-xl shadow-md p-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-3xl font-bold text-center text-gray-800 mb-6\",\n        children: [\"Experiment: \", showSummary ? \"Summary Passage\" : \"Full Passage\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"prose max-w-none text-gray-800 whitespace-pre-wrap mb-8\",\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleFinishReading,\n          className: \"px-6 py-3 bg-blue-600 text-white rounded-xl hover:bg-blue-700 transition\",\n          children: \"Finished Reading\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_s(ExperimentFullText, \"ALG4/8CyMFQCI/xfif7cmTXmN10=\");\n_c = ExperimentFullText;\nexport default ExperimentFullText;\nvar _c;\n$RefreshReg$(_c, \"ExperimentFullText\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","ExperimentFullText","onFinish","_s","startTime","setStartTime","fullText","setFullText","text","setText","loading","setLoading","error","setError","showSummary","setShowSummary","topics","Date","now","randomPrompt","Math","floor","random","length","doSummary","fetchContent","response","fetch","method","headers","body","JSON","stringify","prompt","ok","Error","status","data","json","fetchedFullText","generatedText","summaryResponse","summaryData","err","console","handleFinishReading","endTime","timeInSeconds","round","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/tsuna/reading-experiment/src/experiment/ExperimentFullText.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nconst ExperimentFullText = ({ onFinish }) => {\r\n  const [startTime, setStartTime] = useState(null);\r\n  const [fullText, setFullText] = useState('');\r\n  const [text, setText] = useState('');\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [showSummary, setShowSummary] = useState(false);\r\n\r\n  const topics = [\r\n    \"Write a short passage about the immune system.\",\r\n    \"Write a short passage about neural engineering.\",\r\n    \"Write a short passage about renewable energy.\",\r\n    \"Write a short passage about climate change.\",\r\n    \"Write a short passage about the brain's plasticity.\"\r\n  ];\r\n\r\n  useEffect(() => {\r\n    setStartTime(Date.now());\r\n    const randomPrompt = topics[Math.floor(Math.random() * topics.length)];\r\n    const doSummary = Math.random() < 0.5; // 50% chance for summary\r\n    setShowSummary(doSummary);\r\n\r\n    async function fetchContent() {\r\n      try {\r\n        // Step 1: Get full passage from generateContent API\r\n        const response = await fetch('http://localhost:7071/api//generateContent', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({ prompt: randomPrompt }),\r\n        });\r\n\r\n        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\r\n\r\n        const data = await response.json();\r\n        const fetchedFullText = data.generatedText || 'No content generated.';\r\n        setFullText(fetchedFullText);\r\n\r\n        if (doSummary) {\r\n          setText(fetchedFullText); // show full text immediately\r\n\r\n          // Step 2: Get summary from summarizeText API\r\n          const summaryResponse = await fetch('https://read-racer.azurewebsites.net/api/summarizeText', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ text: fetchedFullText }),\r\n          });\r\n\r\n          if (!summaryResponse.ok) throw new Error(`HTTP error! status: ${summaryResponse.status}`);\r\n\r\n          const summaryData = await summaryResponse.json();\r\n\r\n          // Assume backend returns { generatedText: \"summary here\" }\r\n          setText(summaryData.generatedText || 'No summary generated.');\r\n        } else {\r\n          setText(fetchedFullText);\r\n        }\r\n      } catch (err) {\r\n        setError('Failed to load passage. Please try again.');\r\n        console.error(err);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }\r\n\r\n    fetchContent();\r\n  }, []);\r\n\r\n  const handleFinishReading = () => {\r\n    const endTime = Date.now();\r\n    const timeInSeconds = Math.round((endTime - startTime) / 1000);\r\n    onFinish(timeInSeconds);\r\n  };\r\n\r\n  if (loading) return <div className=\"min-h-screen flex justify-center items-center\">Loading passage...</div>;\r\n  if (error) return <div className=\"min-h-screen flex justify-center items-center text-red-600\">{error}</div>;\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 flex flex-col justify-center items-center px-4 py-12\">\r\n      <div className=\"max-w-3xl w-full bg-white rounded-xl shadow-md p-8\">\r\n        <h1 className=\"text-3xl font-bold text-center text-gray-800 mb-6\">\r\n          Experiment: {showSummary ? \"Summary Passage\" : \"Full Passage\"}\r\n        </h1>\r\n\r\n        <div className=\"prose max-w-none text-gray-800 whitespace-pre-wrap mb-8\">\r\n          {text}\r\n        </div>\r\n\r\n        <div className=\"text-center\">\r\n          <button\r\n            onClick={handleFinishReading}\r\n            className=\"px-6 py-3 bg-blue-600 text-white rounded-xl hover:bg-blue-700 transition\"\r\n          >\r\n            Finished Reading\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExperimentFullText;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}